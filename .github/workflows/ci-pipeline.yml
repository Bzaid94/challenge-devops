name: CI/CD Pipeline

on:
  pull_request:
    types:
      [opened, synchronize, reopened]
    branches:
      - main

env:
  SONAR_HOST: ${{ vars.SONAR_HOST }}
  SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ github.event.repository.name }}
  DOCKER_IMAGE: demo-devops-java

jobs:
  build-and-analysis:
    name: Build & Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build project maven
        run: mvn clean compile

      - name: Run test units
        run: mvn verify

      - name: Analysis with SonarCloud
        run: |
          mvn sonar:sonar \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=${{ env.SONAR_HOST }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.branch.name=master \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build-and-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'table'
          output: 'trivy-report.txt'
          exit-code: '0'
          ignore-unfixed: true

      - name: Comment on Pull Request
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
              const fs = require('fs');
              const report = fs.readFileSync('trivy-report.txt', 'utf8');
              
              const body = `
              \`\`\`
              ${report}
              \`\`\`
              `;
      
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ secrets.DOCKER_USERNAME }}/demo-devops-java:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/demo-devops-java:latest